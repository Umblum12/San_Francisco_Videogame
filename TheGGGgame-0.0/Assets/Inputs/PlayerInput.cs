//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerMain"",
            ""id"": ""bd49f786-22d1-415b-8267-96fb4340991b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8d99f39f-ad3e-4f3f-8751-936f84c0e0d9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8ee374c1-2143-4f99-a97c-ac5ebb0aa38c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomInCameraMinimap"",
                    ""type"": ""Button"",
                    ""id"": ""9570661f-1fed-46ed-bcbf-48e71de41420"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomOutCameraMinimap"",
                    ""type"": ""Button"",
                    ""id"": ""8644fe29-7d30-41ed-bd27-19db7ec0803a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""5b5eef65-0771-4dde-91cd-a3d1c0834e3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookCam"",
                    ""type"": ""Value"",
                    ""id"": ""dc14db2f-b828-490a-bf5a-c8dfb5dfbf5b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""9dd4c2a3-77ea-400e-8046-b59aab6190dc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LoockCam"",
                    ""type"": ""Button"",
                    ""id"": ""58696d2b-e656-4121-905d-df868fd71d7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1b0bade3-29a2-40ad-87fb-ed907d5d0ca6"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""f2d52be5-5ecb-40ad-a30d-8bf08f32e1dc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1c1b1366-a044-4ed5-bb7e-01286a34a623"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3acc3ac3-7391-4afa-a576-9601edb7a24a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""49e95948-4f13-4347-8eda-07cc39118b75"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eae13684-7a90-4f0f-bccc-2c4b8344fcc3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d522fa2e-a021-450b-a281-67727c99b45f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8dc1abe-7404-4a26-a835-804aa971ec0b"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomInCameraMinimap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3694af94-255d-4533-949e-2433f5d51b0a"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomOutCameraMinimap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""338ef235-b787-409f-964a-66653828310a"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac5c4b38-f992-495d-b449-ef51b8d6eae5"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c59639f-e169-49d6-beba-e0d1c7f6767f"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f291dc5-e1e1-48c2-ab87-a3beddae636d"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a4e1f1d-635d-4c21-8a10-d95ad0748773"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoockCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ChangePerspective"",
            ""id"": ""b27c62f6-6371-4b1f-b733-e56d9d9a7987"",
            ""actions"": [
                {
                    ""name"": ""PerspectiveThirdPerson"",
                    ""type"": ""Button"",
                    ""id"": ""be31f213-c0bd-49eb-9c1e-15c2b22f1827"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PerspectiveFirstPerson"",
                    ""type"": ""Button"",
                    ""id"": ""c267cd22-2b65-4ebe-a0a4-db8ed30fb6b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3cbd9d7b-d567-41d2-9ead-4a447b4638b1"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PerspectiveThirdPerson"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8b8c96b-3985-4532-b118-62705be8086a"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PerspectiveFirstPerson"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Minimap"",
            ""id"": ""caa7a9f1-2ec9-4303-b5e0-319c83c02367"",
            ""actions"": [
                {
                    ""name"": ""OpenCloseMinimap"",
                    ""type"": ""Button"",
                    ""id"": ""39a44b18-dab9-41d3-8f6c-97439ec2594d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4398b73f-14b7-4c02-9e16-2ee7ca936991"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenCloseMinimap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""a3b66b57-935d-45be-b415-67b2276874cc"",
            ""actions"": [
                {
                    ""name"": ""OpenCloseInventory"",
                    ""type"": ""Button"",
                    ""id"": ""b6879603-ecba-47d2-afe7-2b7176dec998"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fc193c32-b47a-4bef-a4ae-52d84f8359d0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenCloseInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMain
        m_PlayerMain = asset.FindActionMap("PlayerMain", throwIfNotFound: true);
        m_PlayerMain_Move = m_PlayerMain.FindAction("Move", throwIfNotFound: true);
        m_PlayerMain_Jump = m_PlayerMain.FindAction("Jump", throwIfNotFound: true);
        m_PlayerMain_ZoomInCameraMinimap = m_PlayerMain.FindAction("ZoomInCameraMinimap", throwIfNotFound: true);
        m_PlayerMain_ZoomOutCameraMinimap = m_PlayerMain.FindAction("ZoomOutCameraMinimap", throwIfNotFound: true);
        m_PlayerMain_Run = m_PlayerMain.FindAction("Run", throwIfNotFound: true);
        m_PlayerMain_LookCam = m_PlayerMain.FindAction("LookCam", throwIfNotFound: true);
        m_PlayerMain_Scroll = m_PlayerMain.FindAction("Scroll", throwIfNotFound: true);
        m_PlayerMain_LoockCam = m_PlayerMain.FindAction("LoockCam", throwIfNotFound: true);
        // ChangePerspective
        m_ChangePerspective = asset.FindActionMap("ChangePerspective", throwIfNotFound: true);
        m_ChangePerspective_PerspectiveThirdPerson = m_ChangePerspective.FindAction("PerspectiveThirdPerson", throwIfNotFound: true);
        m_ChangePerspective_PerspectiveFirstPerson = m_ChangePerspective.FindAction("PerspectiveFirstPerson", throwIfNotFound: true);
        // Minimap
        m_Minimap = asset.FindActionMap("Minimap", throwIfNotFound: true);
        m_Minimap_OpenCloseMinimap = m_Minimap.FindAction("OpenCloseMinimap", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_OpenCloseInventory = m_Inventory.FindAction("OpenCloseInventory", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMain
    private readonly InputActionMap m_PlayerMain;
    private IPlayerMainActions m_PlayerMainActionsCallbackInterface;
    private readonly InputAction m_PlayerMain_Move;
    private readonly InputAction m_PlayerMain_Jump;
    private readonly InputAction m_PlayerMain_ZoomInCameraMinimap;
    private readonly InputAction m_PlayerMain_ZoomOutCameraMinimap;
    private readonly InputAction m_PlayerMain_Run;
    private readonly InputAction m_PlayerMain_LookCam;
    private readonly InputAction m_PlayerMain_Scroll;
    private readonly InputAction m_PlayerMain_LoockCam;
    public struct PlayerMainActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerMainActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMain_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerMain_Jump;
        public InputAction @ZoomInCameraMinimap => m_Wrapper.m_PlayerMain_ZoomInCameraMinimap;
        public InputAction @ZoomOutCameraMinimap => m_Wrapper.m_PlayerMain_ZoomOutCameraMinimap;
        public InputAction @Run => m_Wrapper.m_PlayerMain_Run;
        public InputAction @LookCam => m_Wrapper.m_PlayerMain_LookCam;
        public InputAction @Scroll => m_Wrapper.m_PlayerMain_Scroll;
        public InputAction @LoockCam => m_Wrapper.m_PlayerMain_LoockCam;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMain; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMainActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMainActions instance)
        {
            if (m_Wrapper.m_PlayerMainActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnJump;
                @ZoomInCameraMinimap.started -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnZoomInCameraMinimap;
                @ZoomInCameraMinimap.performed -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnZoomInCameraMinimap;
                @ZoomInCameraMinimap.canceled -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnZoomInCameraMinimap;
                @ZoomOutCameraMinimap.started -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnZoomOutCameraMinimap;
                @ZoomOutCameraMinimap.performed -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnZoomOutCameraMinimap;
                @ZoomOutCameraMinimap.canceled -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnZoomOutCameraMinimap;
                @Run.started -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnRun;
                @LookCam.started -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnLookCam;
                @LookCam.performed -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnLookCam;
                @LookCam.canceled -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnLookCam;
                @Scroll.started -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnScroll;
                @Scroll.performed -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnScroll;
                @Scroll.canceled -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnScroll;
                @LoockCam.started -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnLoockCam;
                @LoockCam.performed -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnLoockCam;
                @LoockCam.canceled -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnLoockCam;
            }
            m_Wrapper.m_PlayerMainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @ZoomInCameraMinimap.started += instance.OnZoomInCameraMinimap;
                @ZoomInCameraMinimap.performed += instance.OnZoomInCameraMinimap;
                @ZoomInCameraMinimap.canceled += instance.OnZoomInCameraMinimap;
                @ZoomOutCameraMinimap.started += instance.OnZoomOutCameraMinimap;
                @ZoomOutCameraMinimap.performed += instance.OnZoomOutCameraMinimap;
                @ZoomOutCameraMinimap.canceled += instance.OnZoomOutCameraMinimap;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @LookCam.started += instance.OnLookCam;
                @LookCam.performed += instance.OnLookCam;
                @LookCam.canceled += instance.OnLookCam;
                @Scroll.started += instance.OnScroll;
                @Scroll.performed += instance.OnScroll;
                @Scroll.canceled += instance.OnScroll;
                @LoockCam.started += instance.OnLoockCam;
                @LoockCam.performed += instance.OnLoockCam;
                @LoockCam.canceled += instance.OnLoockCam;
            }
        }
    }
    public PlayerMainActions @PlayerMain => new PlayerMainActions(this);

    // ChangePerspective
    private readonly InputActionMap m_ChangePerspective;
    private IChangePerspectiveActions m_ChangePerspectiveActionsCallbackInterface;
    private readonly InputAction m_ChangePerspective_PerspectiveThirdPerson;
    private readonly InputAction m_ChangePerspective_PerspectiveFirstPerson;
    public struct ChangePerspectiveActions
    {
        private @PlayerInput m_Wrapper;
        public ChangePerspectiveActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PerspectiveThirdPerson => m_Wrapper.m_ChangePerspective_PerspectiveThirdPerson;
        public InputAction @PerspectiveFirstPerson => m_Wrapper.m_ChangePerspective_PerspectiveFirstPerson;
        public InputActionMap Get() { return m_Wrapper.m_ChangePerspective; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChangePerspectiveActions set) { return set.Get(); }
        public void SetCallbacks(IChangePerspectiveActions instance)
        {
            if (m_Wrapper.m_ChangePerspectiveActionsCallbackInterface != null)
            {
                @PerspectiveThirdPerson.started -= m_Wrapper.m_ChangePerspectiveActionsCallbackInterface.OnPerspectiveThirdPerson;
                @PerspectiveThirdPerson.performed -= m_Wrapper.m_ChangePerspectiveActionsCallbackInterface.OnPerspectiveThirdPerson;
                @PerspectiveThirdPerson.canceled -= m_Wrapper.m_ChangePerspectiveActionsCallbackInterface.OnPerspectiveThirdPerson;
                @PerspectiveFirstPerson.started -= m_Wrapper.m_ChangePerspectiveActionsCallbackInterface.OnPerspectiveFirstPerson;
                @PerspectiveFirstPerson.performed -= m_Wrapper.m_ChangePerspectiveActionsCallbackInterface.OnPerspectiveFirstPerson;
                @PerspectiveFirstPerson.canceled -= m_Wrapper.m_ChangePerspectiveActionsCallbackInterface.OnPerspectiveFirstPerson;
            }
            m_Wrapper.m_ChangePerspectiveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PerspectiveThirdPerson.started += instance.OnPerspectiveThirdPerson;
                @PerspectiveThirdPerson.performed += instance.OnPerspectiveThirdPerson;
                @PerspectiveThirdPerson.canceled += instance.OnPerspectiveThirdPerson;
                @PerspectiveFirstPerson.started += instance.OnPerspectiveFirstPerson;
                @PerspectiveFirstPerson.performed += instance.OnPerspectiveFirstPerson;
                @PerspectiveFirstPerson.canceled += instance.OnPerspectiveFirstPerson;
            }
        }
    }
    public ChangePerspectiveActions @ChangePerspective => new ChangePerspectiveActions(this);

    // Minimap
    private readonly InputActionMap m_Minimap;
    private IMinimapActions m_MinimapActionsCallbackInterface;
    private readonly InputAction m_Minimap_OpenCloseMinimap;
    public struct MinimapActions
    {
        private @PlayerInput m_Wrapper;
        public MinimapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenCloseMinimap => m_Wrapper.m_Minimap_OpenCloseMinimap;
        public InputActionMap Get() { return m_Wrapper.m_Minimap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MinimapActions set) { return set.Get(); }
        public void SetCallbacks(IMinimapActions instance)
        {
            if (m_Wrapper.m_MinimapActionsCallbackInterface != null)
            {
                @OpenCloseMinimap.started -= m_Wrapper.m_MinimapActionsCallbackInterface.OnOpenCloseMinimap;
                @OpenCloseMinimap.performed -= m_Wrapper.m_MinimapActionsCallbackInterface.OnOpenCloseMinimap;
                @OpenCloseMinimap.canceled -= m_Wrapper.m_MinimapActionsCallbackInterface.OnOpenCloseMinimap;
            }
            m_Wrapper.m_MinimapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OpenCloseMinimap.started += instance.OnOpenCloseMinimap;
                @OpenCloseMinimap.performed += instance.OnOpenCloseMinimap;
                @OpenCloseMinimap.canceled += instance.OnOpenCloseMinimap;
            }
        }
    }
    public MinimapActions @Minimap => new MinimapActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private IInventoryActions m_InventoryActionsCallbackInterface;
    private readonly InputAction m_Inventory_OpenCloseInventory;
    public struct InventoryActions
    {
        private @PlayerInput m_Wrapper;
        public InventoryActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenCloseInventory => m_Wrapper.m_Inventory_OpenCloseInventory;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void SetCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterface != null)
            {
                @OpenCloseInventory.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnOpenCloseInventory;
                @OpenCloseInventory.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnOpenCloseInventory;
                @OpenCloseInventory.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnOpenCloseInventory;
            }
            m_Wrapper.m_InventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OpenCloseInventory.started += instance.OnOpenCloseInventory;
                @OpenCloseInventory.performed += instance.OnOpenCloseInventory;
                @OpenCloseInventory.canceled += instance.OnOpenCloseInventory;
            }
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);
    public interface IPlayerMainActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnZoomInCameraMinimap(InputAction.CallbackContext context);
        void OnZoomOutCameraMinimap(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnLookCam(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
        void OnLoockCam(InputAction.CallbackContext context);
    }
    public interface IChangePerspectiveActions
    {
        void OnPerspectiveThirdPerson(InputAction.CallbackContext context);
        void OnPerspectiveFirstPerson(InputAction.CallbackContext context);
    }
    public interface IMinimapActions
    {
        void OnOpenCloseMinimap(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnOpenCloseInventory(InputAction.CallbackContext context);
    }
}
